library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_arith.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;
entity fifo is
port ( clk : in std_logic;
enr : in std_logic; --enable read,should be '0' when not in use.
enw : in std_logic; --enable write,should be '0' when not in use.
dataout : out std_logic_vector(3 downto 0); --output data
datain : in std_logic_vector (3 downto 0); --input data
empty : out std_logic; --set as '1' when the queue is empty
full : out std_logic ); --set as '1' when the queue is full
end fifo;
architecture Behavioral of fifo is
type memory_type is array (0 to 3) of std_logic_vector(3 downto 0);
signal memory : memory_type :=(others => (others => '0')); --memory for queue.
signal readptr,writeptr : std_logic_vector(1 downto 0) :="00"; --read/write pointers.
begin
process(clk,datain,readptr,writeptr)
begin
if(clk'event and clk='1' and enr ='1') then
dataout <= memory(conv_integer(readptr));
-- error <= '0';
readptr <= readptr + '1'; --points to next address.
end if;
if(clk'event and clk='1' and enw ='1') then
memory(conv_integer(writeptr)) <= datain;
writeptr <= writeptr + '1'; --points to next address.
end if;
if(readptr = "11") then --resetting read pointer.
readptr <= "00";
end if;
if(writeptr = "11") then --checking whether queue is full or not
full <='1';
writeptr <= "00";
else
full <='0';
end if;
if(writeptr = "00") then --checking whether queue is empty or not
empty <='1';
else
empty <='0';
end if;
end process;
end Behavioral;

----------
test bench
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
ENTITY fifo_tb IS
END fifo_tb;
ARCHITECTURE behavior OF fifo_tb IS
-- Component Declaration for the Unit Under Test (UUT)
COMPONENT fifo
PORT(
clk : IN std_logic;
enr : IN std_logic;
enw : IN std_logic;
datain : IN std_logic_vector(3 downto 0);
dataout : OUT std_logic_vector(3 downto 0);
empty : OUT std_logic;
full : OUT std_logic
);
END COMPONENT;
--Inputs
signal clk : std_logic := '0';
signal enr : std_logic := '0';
signal enw : std_logic := '0';
signal datain : std_logic_vector(3 downto 0) := (others => '0');
--Outputs
signal dataout : std_logic_vector(3 downto 0);
signal empty : std_logic;
signal full : std_logic;
-- Clock period definitions
constant clk_period : time := 10 ns;
BEGIN
-- Instantiate the Unit Under Test (UUT)
uut: fifo PORT MAP (
clk => clk,
enr => enr,
enw => enw,
datain => datain,
dataout => dataout,
empty => empty,
full => full
);
-- Clock process definitions
process(clk)
begin
clk <= not clk after 20ns;
end process;
process
begin
enr <='1' after 50ns;
enw <= '1';
datain <="1111"; wait for 100ns;
datain <="1101"; wait for 100ns;
datain <="1100"; wait for 100ns;
datain <="0001" ;wait for 100ns;
datain <="0010" ;wait for 100ns;
datain <="0100" ;wait for 100ns;
datain <="1000" ;wait for 100ns;
datain <="1100" ;wait for 100ns;
end process;
end;